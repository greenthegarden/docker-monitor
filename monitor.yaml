---
- name: Configure monitoring services

  hosts: localhost

  vars:

  pre_tasks:

    - name: Check for dependent python modules
      community.general.python_requirements_info:
        dependencies:
          - docker>=5.0.0
      register: python_requirements
      tags:
        - always

    - ansible.builtin.debug:
        var: python_requirements

    - name: Ensure Python 3 is being used
      ansible.builtin.assert:
        that:
          - python_requirements.python_version_info.major == 3
        fail_msg: "Python 3 is required"
        success_msg: "Python 3 found"
      tags:
        - always

    - name: Install any required python modules
      ansible.builtin.pip:
        name: "{{ item }}"
      loop: "{{ python_requirements.not_found }}"
      when: python_requirements.not_found | length > 0
      tags:
        - always

    - name: Run message
      ansible.builtin.debug:
        msg: "Running on host {{ ansible_hostname }} via {{ ansible_default_ipv4.interface }} @ {{ ansible_default_ipv4.address }} as user {{ ansible_user_id }}"
      tags:
        - always

  tasks:

    ####### MONITORING NETWORK SECTION

    - name: Set Monitoring Network facts
      ansible.builtin.set_fact:
        monitoring_network_name: monitoring-network

    - name: Create a Monitoring Network
      community.docker.docker_network:
        name: "{{ monitoring_network_name | default('monitoring-network') }}"
        internal: false
    
    ####### NODE EXPORTER SECTION

    - name: Set Node Exporter facts
      ansible.builtin.set_fact:
        node_exporter_image_name: prom/node-exporter
        node_exporter_image_tag: latest
        node_exporter_service_name: node-exporter
        node_exporter_service_host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        node_exporter_service_port: 9100
        node_exporter_service_protocol: http
      tags:
        - node-exporter

    - name: Set Node Exporter container facts
      ansible.builtin.set_fact:
        node_exporter_ports:
          - "{{ node_exporter_service_port | default(9100) }}:9100"
        node_exporter_service_url: "{{ node_exporter_service_protocol }}://{{ node_exporter_service_host }}:{{ node_exporter_service_port }}"
        node_exporter_volumes:
            - /proc:/host/proc:ro
            - /sys/:/host/sys:ro
            - /:/rootfs:ro

    - name: Check if Node Exporter is running
      community.docker.docker_container_info:
        name: "{{ node_exporter_service_name }}"
      register: node_exporter_state
      
    - block:

      - name: Pull Node Exporter image
        community.docker.docker_image:
          name: "{{ node_exporter_image_name }}:{{ node_exporter_image_tag | default('latest') }}"
          source: pull
        tags:
          - node-exporter

      - name: Start Node Exporter
        community.docker.docker_container:
          name: "{{ node_exporter_service_name }}"
          image: "{{ node_exporter_image_name }}:{{ node_exporter_image_tag | default('latest') }}"
          detach: true
          hostname: "{{ node_exporter_service_name }}"
          networks_cli_compatible: true
          networks:
            - name: "{{ monitoring_network_name }}"
          published_ports: "{{ node_exporter_ports }}"
          restart_policy: unless-stopped
          state: started
          volumes: "{{ node_exporter_volumes }}"
        register: node_exporter_container_state
        tags:
          - node-exporter

      - name: Wait for Node Exporter to accept connections
        ansible.builtin.wait_for:
          # host: "{{ node_exporter_container_state['container']\
          #   ['NetworkSettings']\
          #   ['Networks']\
          #   ['monitoring-network']\
          #   ['IPAddress'] }}"
          host: "{{ node_exporter_service_host }}"
          port: "{{ node_exporter_service_port | default(9100) }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: node_exporter_running
        until: node_exporter_running is success
        retries: 10
        tags:
          - node-exporter

      when: not node_exporter_state.exists

    ####### LOKI SECTION

    # Source: https://grafana.com/docs/loki/latest/installation/docker/

    - name: Set Loki facts
      ansible.builtin.set_fact:
        loki_image_name: grafana/loki
        loki_image_tag: 2.6.1
        loki_service_name: loki
        loki_service_host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        loki_service_port: 3100
        loki_service_protocol: http
        loki_config_dir: "/home/{{ ansible_user_id }}"
        loki_volume: loki-volume
      tags:
        - loki

    - name: Set Loki container facts
      ansible.builtin.set_fact:
        loki_command:
          - --config.file=/mnt/config/loki-config.yaml
        loki_ports:
          - "{{ loki_service_port | default(3100) }}:3100"
        loki_service_url: "{{ loki_service_protocol }}://{{ loki_service_host }}:{{ loki_service_port }}"
        loki_volumes:
            - "{{ loki_config_dir }}:/mnt/config"
            - /etc/localtime:/etc/localtime:ro

    - name: Check if Loki is running
      community.docker.docker_container_info:
        name: "{{ loki_service_name }}"
      register: loki_state
      tags:
        - loki
      
    - block:
    
      - name: Pull Loki image
        community.docker.docker_image:
          name: "{{ loki_image_name }}:{{ loki_image_tag | default('latest') }}"
          source: pull
        tags:
          - loki

      # wget https://raw.githubusercontent.com/grafana/loki/v2.6.1/cmd/loki/loki-local-config.yaml -O loki-config.yaml
      - name: Pull Loki default configuration
        ansible.builtin.get_url:
          url: "https://raw.githubusercontent.com/grafana/loki/v{{ loki_image_tag }}/cmd/loki/loki-local-config.yaml"
          dest: "{{ loki_config_dir }}/loki-config.yaml"
        tags:
          - loki

      # docker run --name loki -d -v $(pwd):/mnt/config -p 3100:3100 grafana/loki:2.6.1 -config.file=/mnt/config/loki-config.yaml
      - name: Start Loki
        community.docker.docker_container:
          name: "{{ loki_service_name | default('loki') }}"
          image: "{{ loki_image_name }}:{{ loki_image_tag | default('latest') }}"
          command: "{{ loki_command }}"
          detach: true
          networks_cli_compatible: true
          networks:
            - name: "{{ monitoring_network_name }}"
          published_ports: "{{ loki_ports }}"
          restart: true
          restart_policy: unless-stopped
          state: started
          volumes: "{{ loki_volumes }}"
        register: loki_container_state
        tags:
          - loki

      - name: Wait for Loki to accept connections
        ansible.builtin.wait_for:
          host: "{{ loki_service_host }}"
          port: "{{ loki_service_port | default(3100) }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: loki_running
        until: loki_running is success
        retries: 10
        tags:
          - loki

      when: not loki_state.exists

    ####### PROMTAIL SECTION

    # Source: https://grafana.com/docs/loki/latest/installation/docker/

    - name: Set Promtail facts
      ansible.builtin.set_fact:
        promtail_image_name: grafana/promtail
        promtail_image_tag: "{{ loki_image_tag | default('latest') }}"
        promtail_service_name: promtail
        promtail_service_host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        promtail_service_port: 9080
        promtail_service_protocol: http
        promtail_config_dir: "/home/{{ ansible_user_id }}"
      tags:
        - promtail

    - name: Set Promtail container facts
      ansible.builtin.set_fact:
        promtail_command:
            - --config.file=/mnt/config/promtail-config.yaml
        promtail_ports:
          - "{{ promtail_service_port | default(9080) }}:9080"
        promtail_service_url: "{{ promtail_service_protocol }}://{{ promtail_service_host }}:{{ promtail_service_port }}"
        promtail_volumes:
            - "{{ promtail_config_dir }}:/mnt/config"
            - /var/log:/var/log
            - /etc/localtime:/etc/localtime:ro

    - name: Check if Promtail is running
      community.docker.docker_container_info:
        name: "{{ promtail_service_name }}"
      register: promtail_state
      tags:
        - promtail
      
    - block:
    
      - name: Pull Promtail image
        community.docker.docker_image:
          name: "{{ promtail_image_name }}:{{ promtail_image_tag | default('latest') }}"
          source: pull
        tags:
          - promtail

      # wget https://raw.githubusercontent.com/grafana/loki/v2.6.1/clients/cmd/promtail/promtail-docker-config.yaml -O promtail-config.yaml
      - name: Pull Promtail default configuration
        ansible.builtin.get_url:
          url: "https://raw.githubusercontent.com/grafana/loki/v{{ loki_image_tag }}/clients/cmd/promtail/promtail-docker-config.yaml"
          dest: "{{ promtail_config_dir }}/promtail-config.yaml"
        tags:
          - promtail

      # docker run --name promtail -d -v $(pwd):/mnt/config -v /var/log:/var/log --link loki grafana/promtail:2.6.1 -config.file=/mnt/config/promtail-config.yaml
      - name: Start Promtail
        community.docker.docker_container:
          name: "{{ promtail_service_name }}"
          image: "{{ promtail_image_name }}:{{ promtail_image_tag | default('latest') }}"
          command: "{{ promtail_command }}"
          detach: true
          links:
            - loki:loki
          networks_cli_compatible: true
          networks:
            - name: "{{ monitoring_network_name }}"
          published_ports: "{{ promtail_ports }}"
          restart: true
          restart_policy: unless-stopped
          state: started
          volumes: "{{ promtail_volumes }}"
        register: promtail_container_state
        tags:
          - promtail

      - name: Wait for Promtail to accept connections
        ansible.builtin.wait_for:
          host: "{{ promtail_service_host }}"
          port: "{{ promtail_service_port | default(9080) }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: promtail_running
        until: promtail_running is success
        retries: 10
        tags:
          - promtail

      when: not promtail_state.exists

    ####### PUSHGATEWAY SECTION

    - name: Set Pushgateway facts
      ansible.builtin.set_fact:
        pushgateway_image_name: prom/pushgateway
        pushgateway_image_tag: 'latest' # 'v1.4.2'
        pushgateway_service_name: pushgateway
        pushgateway_service_host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        pushgateway_service_port: 9091
        pushgateway_service_protocol: http
      tags:
        - pushgateway

    - name: Set Promtail container facts
      ansible.builtin.set_fact:
        pushgateway_command:
        pushgateway_ports:
          - "{{ pushgateway_service_port | default(9091) }}:9091"
        pushgateway_service_url: "{{ pushgateway_service_protocol }}://{{ pushgateway_service_host }}:{{ pushgateway_service_port }}"
        pushgateway_volumes:
            - /etc/localtime:/etc/localtime:ro

    - name: Check if Pushgateway is running
      community.docker.docker_container_info:
        name: "{{ pushgateway_service_name }}"
      register: pushgateway_state
      tags:
        - pushgateway

    - block:

      - name: Pull Pushgateway image
        community.docker.docker_image:
          name: "{{ pushgateway_image_name }}:{{ pushgateway_image_tag | default('latest') }}"
          source: pull
        tags:
          - pushgateway

      - name: Start Pushgateway
        community.docker.docker_container:
          name: "{{ pushgateway_service_name | default('pushgateway') }}"
          image: "{{ pushgateway_image_name }}:{{ pushgateway_image_tag | default('latest') }}"
          detach: true
          networks_cli_compatible: true
          networks:
            - name: "{{ monitoring_network_name }}"
          published_ports: "{{ pushgatway_ports }}"
          restart: true
          restart_policy: unless-stopped
          state: started
          volumes: "{{ pushgateway_volumes }}"
        register: pushgateway_container_state
        tags:
          - pushgateway

      - name: Wait for Pushgateway to accept connections
        ansible.builtin.wait_for:
          host: "{{ pushgateway_service_host }}"
          port: "{{ pushgateway_service_port | default(9091) }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: pushgateway_running
        until: pushgateway_running is success
        retries: 10
        tags:
          - pushgateway

      when: not pushgateway_state.exists

    ####### PROMETHEUS SECTION

    # https://hub.docker.com/r/prom/prometheus
    # https://medium.com/platform-engineering/monitoring-traefik-with-grafana-1d037af5b952

    - name: Set Prometheus facts
      ansible.builtin.set_fact:
        prometheus_image_name: prom/prometheus
        prometheus_image_tag: latest
        prometheus_service_name: prometheus
        prometheus_service_host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        prometheus_service_port: 9090
        prometheus_service_protocol: http

      tags:
        - prometheus

    - name: Set Prometheus container facts
      ansible.builtin.set_fact:
        prometheus_command:
            - --config.file=/etc/prometheus/prometheus.yml
            - --web.enable-lifecycle
        prometheus_ports:
          - "{{ prometheus_service_port | default(9090) }}:9090"
        prometheus_service_url: "{{ loki_service_protocol }}://{{ prometheus_service_host }}:{{ prometheus_service_port }}"
        prometheus_volumes:
            - /etc/localtime:/etc/localtime:ro

    - name: Check if Prometheus is running
      community.docker.docker_container_info:
        name: "{{ prometheus_service_name }}"
      register: prometheus_state
      tags:
        - prometheus
      
    - block:

      - name: Pull Prometheus image
        community.docker.docker_image:
          name: "{{ prometheus_image_name }}:{{prometheus_image_tag | default('latest') }}"
          source: pull
        tags:
          - prometheus

      - name: Start Prometheus
        community.docker.docker_container:
          name: "{{ prometheus_service_name | default('prometheus') }}"
          image: "{{ prometheus_image_name }}:{{ prometheus_image_tag | default('latest') }}"
          command: "{{ prometheus_command }}"
          detach: true
          memory: 300M
          memory_reservation: 100M
          networks_cli_compatible: true
          networks:
            - name: "{{ monitoring_network_name }}"
          published_ports: "{{ prometheus_ports }}"
          restart: true
          restart_policy: unless-stopped
          state: started
          volumes: "{{ prometheus_volumes }}"
        register: prometheus_container_state
        tags:
          - prometheus

      - name: Wait for Prometheus to accept connections
        ansible.builtin.wait_for:
          host: "{{ prometheus_service_host }}"
          port: "{{ prometheus_service_port | default(9090) }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: prometheus_running
        until: prometheus_running is success
        retries: 10
        tags:
          - prometheus

      when: not prometheus_state.exists

    - block:
      
      - name: Add Prometheus container to inventory
        add_host:
          name: "{{ prometheus_service_name }}"
          ansible_connection: community.docker.docker
        changed_when: false

      - name: run command in container
        delegate_to: "{{ prometheus_service_name }}"
        copy:
          src: files/prometheus/prometheus.yml
          dest: /etc/prometheus/prometheus.yml
      
      when: 0


    - block:

      - name: Create Prometheus configuration file
        ansible.builtin.template:
          src: templates/prometheus/prometheus.yml.j2
          dest: /tmp/prometheus.yml
          mode: '0644'
        tags:
          - prometheus

      - name: Copy configuration file into Prometheus container
        ansible.builtin.shell: docker cp /tmp/prometheus.yml {{ prometheus_service_name }}:/etc/prometheus/prometheus.yml
        tags:
          - prometheus

        # curl -X POST :9090/-/reload
      - name: Restart Prometheus via curl
        ansible.builtin.uri:
          url: "{{ prometheus_service_url }}/-/reload"
          method: POST
        tags:
          - prometheus

      when: 1

    ####### GRAFANA SECTION

    - name: Set Grafana facts
      ansible.builtin.set_fact:
        grafana_image_name: grafana/grafana
        grafana_image_tag: latest
        grafana_service_name: grafana
        grafana_service_port: 3000
        grafana_volume: grafana-volume
      tags:
        - grafana

    - name: Set Grafana API facts
      ansible.builtin.set_fact:
        grafana_instance: "{{ grafana_service_name | default('grafana') }}"
        # Use domain name here as Grafana is running on a different Docker network
        grafana_api_url: "http://{{ ansible_default_ipv4.address }}:{{ grafana_service_port }}"
        grafana_security: {admin_user: admin, admin_password: "monitoring"}
        grafana_use_provisioning: false  # will use API
      tags:
        - grafana

    - name: Create Grafana volume
      community.docker.docker_volume:
        name: "{{ grafana_volume }}"
        state: present
      tags:
        - grafana

    - name: Check if Grafana is running
      community.docker.docker_container_info:
        name: "{{ grafana_service_name }}"
      register: grafana_state

    - block:

      - name: Pull Grafana image
        community.docker.docker_image:
          name: "{{ grafana_image_name }}:{{ grafana_image_tag | default('latest') }}"
          source: pull
        tags:
          - grafana

      # docker run -d -p 3000:3000 grafana/grafana
      - name: Start Grafana
        community.docker.docker_container:
          name: "{{ grafana_service_name }}"
          image: "{{ grafana_image_name }}:{{ grafana_image_tag | default('latest') }}"
          detach: true
          env:
            GF_SECURITY_ADMIN_PASSWORD: "{{ grafana_security.admin_password }}"
            GF_USERS_ALLOW_SIGN_UP: "false"
          # log_driver: loki
          # log_options:
          #   loki-url: "http://{{ loki_service_name }}:{{ loki_service_port }}/loki/api/v1/push"
          #   loki-external-labels: job=dockerlogs,owner=monitor,environment=development
          networks_cli_compatible: true
          networks:
            - name: "{{ monitoring_network_name }}"
          published_ports:
            - "{{ grafana_service_port }}:3000"
          restart: true
          restart_policy: unless-stopped
          state: started
          volumes:
            - "{{ grafana_volume }}:/var/lib/grafana"
            - /etc/localtime:/etc/localtime:ro
        register: grafana_register
        tags:
          - grafana

      - name: Wait for Grafana to accept connections
        ansible.builtin.wait_for:
          # host: "{{ grafana_register['container']\
          #   ['NetworkSettings']\
          #   ['Networks']\
          #   ['monitoring-network']\
          #   ['IPAddress'] }}"
          host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
          port: "{{ grafana_service_port | default('3000') }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: grafana_running
        until: grafana_running is success
        retries: 10
        tags:
          - grafana

      when: not grafana_state.exists

    - name: Create Grafana datasources
      community.grafana.grafana_datasource:
        name: "{{ item.name }}"
        grafana_url: "{{ grafana_api_url }}"
        grafana_user: "{{ grafana_security.admin_user }}"
        grafana_password: "{{ grafana_security.admin_password }}"
        org_id: "1"
        ds_type: "{{ item.type }}"
        ds_url: "{{ item.url }}"
        access: "{{ item.access }}"
        tls_skip_verify: true
      with_items: "{{ grafana_datasources }}"
      vars:
        grafana_datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            url: "http://{{ prometheus_service_name }}:{{ prometheus_service_port }}"
            basicAuth: false
          - name: Loki
            type: loki
            access: proxy
            url: "http://{{ loki_service_name }}:{{ loki_service_port }}"
            basicAuth: false
          # - name: InfluxDB
          #   type: influxdb
          #   access: proxy
          #   url: "http://192.168.1.186:8086/"
          #   basicAuth: false
      tags:
        - grafana

    - name: Create Grafana dashboards
      community.grafana.grafana_dashboard:
        grafana_url: "{{ grafana_api_url }}"
        # grafana_api_key: "{{ grafana_api_key }}"
        grafana_user: "{{ grafana_security.admin_user }}"
        grafana_password: "{{ grafana_security.admin_password }}"
        # folder: General
        dashboard_url: "https://grafana.com/api/dashboards/{{ item.dashboard_id }}/revisions/{{ item.dashboard_revision }}/download"
      vars:
        grafana_dashboards:
          # Node Exporter Full by rfraile
          # https://grafana.com/grafana/dashboards/1860
          - dashboard_id: '1860'
            dashboard_revision: '27'
            datasource: 'Prometheus'
          # Loki Logs Dashboard by swaml
          # https://grafana.com/grafana/dashboards/15324
          - dashboard_id: '15324'
            dashboard_revision: '1'
            datasource: 'Loki'
          # Loki2.0 Global Metrics by Link
          # https://grafana.com/grafana/dashboards/13407
          - dashboard_id: '13407'
            dashboard_revision: '1'
            datasource: 'Loki'
      with_items: "{{ grafana_dashboards }}"
      tags:
        - grafana
